Hashing
    Hashing is a method of sorting and indexing data. 
    The idea behind hashng is to allow large amounts of data to be indexed using  keys commmonly created by formulas.

    Explaination:-
        Whatever string we provide to this DS will gone through a function, which will convert the string into an Unique number, based on that given number string will be assigned to an Array.


Why Hashing ?
    Data Structure      Time Complexity for SEARCH
    Array                O(LogN)
    LinkedList           O(N)
    Tree                 O(LogN)
    Hashing              O(1)/O(N)


Hashing Terminology
    Hash Function : It is a function that can be used to map of arbitrary size of data of fixed size.
    Key : Input data by a user.
    Hash Value : A value that is returned by Hash Function, AKA - Hash codes, digests or simply hashes. 
    Hash Table : It is a data structure which implements an associative array abstract data type, a structure that can
                 map keys to values.
    Collision : A collision occurs when two different keys to a hash function produce the same output.       



Hash Functions
    If the input is in Number
     - Mod function
        int mod(int number, int cellNumber){
            return number % cellNumber;   //cellNumber here is the length of the Array
        }      


    If the input is a String
     - ASCII function

        public int modASCII(String word, int cellNumber){
            int total = 0;
            for(int i=0; i<word.length(); i++){
                total += word.charAt(i);
                System.out.println(total);
            }
            return total % cellNumber;
        }    


    Properties of good Hash function
        - It distributes hash values uniformly across hash tables.    
        - It has to use all the input data.



Collision Resolution Techniques
    There are two ways to solve this, first is Direct Chaining and second one is Open Addressing

                            Resolution Techniques
            Direct Chaining                     Open Addressing
                                                    Linear Probing
                                                    Quadratic Probing
                                                    Double Hashing


    
    Direct Chaining - Implements the buckets as linked list. Colliding elements are stored in this lists.
                      Suppose we have an array of 15, and have 3 string ABCD, EFGH and IJKLM, three of them are giving the same hash code i.e 2. So what we will do it, at the index of 2 of Array we will give the address of linked list node where ABCD is saved, and address of EFGH will be given to first node, and so on.




Hash Table is Full
    - Direct Chaining
        - This situation will never arise. 
            Since we will be using linked list, so no matter how many nodes you add it will be added in the linked list. It's just the searching method will be taking long to find an element, as the time complexity will be o(n).

    Open Addressing
        - Create 2X size of current Hash Table and recall hashing for current keys.      
            Suppose we have hash table size of 10 and every block has been filled with the key given by user, That time hash table will be double of his size, in our case it will be size of 20.