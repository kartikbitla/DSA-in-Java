What is Sorting?
  - By definition sorting refers to arranging data in a particular format: either ascending or descenting.

Types of Sorting?
    Sorting
      - Space used
        In place
        Out of place

      - Stability
        Stable
        Unstable  


In place sorting - Sorting algorithms which does not require any extra space for sorting.
                   Example -  Bubble sort

Out place sorting - Sorting algorithms which requires an extra space for sorting
                    Example - Merge sort


Stable sorting - If a sorting algoruthm after sorting the contents does not change the sequence of similar content in which they appear, then this sorting is called stable sorting.
                 Example - Insertion sort

Unstable sorting - If a sorting algorithm after sorting the content changes the sequence of similar content in which they appear, then it is called unstable sort.
                   Example - Quick sort
                     

Sorting Terminology
Increasing Order 
    - If successive element is greater than the previous one.
    - Example : 1, 3, 5, 7, 9, 11


Decreasing Order
    - If successive element is less than the previous one.
    - Example : 11, 9, 7, 5, 3, 1


Non Increasing Order
    - If successive element is less than or equal to its previous element in the sequence.
    - Example : 11, 9, 7, 5, 5, 3, 1



Non Decreasing Order
    - if successive elemene is greater than or equal to its previous element in the sequence.
    - Example : 1, 3, 5, 7, 7, 9, 11



*****Types of sorting algorithms*****
Bubble sort
Selecetion sort
Insertion sort
Bucket sort
Merge sort
Quick sort
Heap sort


1. Bubble sort 
 - Bubble sort is also referred as Sinking sort
 - We repeatedly compare each pair of adjacent items and swap them if they are in the wrong order

when to use Bubble Sort?
 - When the input is almost sorted
 - Space is concern
 - Easy to implement

When to avoid Bubble Sort?
 - Average time complexity is poor




2. Selection sort
 - In case of selection sort we repeatedly find the minimum element and move it to the sorted part of array to make unsorted part sorted. 

When to use Selection sort?
 - When we have insufficient memory
 - Easy to implement

When to avoid Selection Sort?
 - When time is a concern





3. Insertion sort
 - Divide the given array into two part
 - Take first element from unsorted array and find its correct position in sorted array
 - Repeat until unsorted array is empty

When to use Insertion sort?
 - When we have insufficient memory
 - Easy to implement
 - When we have continuous inflow of numbers and we want to keep them sorted

When to avoid Insertion sort?
 - When time is a concern




4. Bucket sort
 - Create buckets and distribute elements of array into buckets
 - Sort buckets individually
 - Merge buckets after sortig

 number of buckets = round(Sqrt(number of elements))
 round(sqrt(9)) = 3

 Appropriate bucket = ceil(Value * number of buckets / maxValue)
 sort all buckets(using any sorting algorithms)

 When to use Bucket Sort?
  - When input uniformly distributed over range
    - uniformly distributed - 1,2,4,5,3,8,7,9
    - uniformly not distributed - 1,2,4,9,10,93,96

 When to avoid Bucket Sort? 
 - When space is a concern.